#pragma once

#define SCALE_DOWN_RADIUS_FACTOR (1000000.0f / DEFAULT_PLANET_RADIUS)

#define SCALE_SPHEREMAP_RADIUS	200
#define SCALE_SUN_RADIUS		(69634.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_MERCURY_RADIUS	(2440.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_VENUS_RADIUS		(6052.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_EARTH_RADIUS		(6371.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_MARS_RADIUS		(3390.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_JUPITER_RADIUS	(69911.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_SATURN_RADIUS		(58232.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_URANUS_RADIUS		(25362.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_NEPTUNE_RADIUS	(24622.0f / SCALE_DOWN_RADIUS_FACTOR)
#define SCALE_PLUTO_RADIUS		(1188.3f / SCALE_DOWN_RADIUS_FACTOR)

typedef struct _PLANET 
{
	SPHERE Sphere;
}PLANET, *P_PLANET;

BOOL InitPlanet(PLANET &Planet, FLOAT SphereRadius, BOOL InvertedNormals);
void DrawPlanet(PLANET &Planet, PLANET_SHADER &PlanetShader, vmath::mat4 modelMatrix, UINT planetTexture);
void CleanupPlanet(PLANET &Planet);
FLOAT GetPlanetScale(PLANETS_AND_SATELLITES PlanetEnum);
void DrawAllPlanets();
void DrawTransformedPlanet(FLOAT xPos, FLOAT yPos, FLOAT zPos, FLOAT fPlanetScale, GLuint Texture, BOOL bRotate = TRUE);
FLOAT GetPlanetOffset(PLANETS_AND_SATELLITES Planet);

